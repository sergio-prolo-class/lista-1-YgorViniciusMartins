/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;
import java.util.Objects;
import java.util.Scanner;

public class App {
    //Verifica se os navios estão na horizontal ou vertical
    static void navioVerticalHorizontal (String[][] tabuleiro, int linha, int coluna, int tamanho_navio, String aparencia){
        //Verificando se esta na horizontal
        if(coluna + tamanho_navio <= 10 && Objects.equals(aparencia, tabuleiro[linha][coluna + 1])) {
            for (int i = 0; i < tamanho_navio; i++) {
                if (tamanhoNavio(tabuleiro[linha][coluna + i]) != 0 && Objects.equals(aparencia, tabuleiro[linha][coluna + i])) {
                    tabuleiro[linha][coluna + i] = ".";
                } else {
                    System.out.println("Tabuleiro inválido, navio não está na vertical ou horizontal");
                    System.exit(0);
                }
                if ((i + 1) >= tamanho_navio) {
                    return;
                }
            }
        }

        //Verificando se esta na vertical
        if(linha + tamanho_navio <= 10 && Objects.equals(aparencia, tabuleiro[linha + 1][coluna])) {
            for (int i = 0; i < tamanho_navio; i++) {
                if (tamanhoNavio(tabuleiro[linha + i][coluna]) != 0 && Objects.equals(aparencia, tabuleiro[linha + i][coluna])) {
                    tabuleiro[linha + i][coluna] = ".";
                } else {
                    System.out.println("Tabuleiro inválido, navio não está na vertical ou horizontal");
                    System.exit(0);
                }
                if ((i + 1) >= tamanho_navio) {
                    return;
                }
            }
        }
        System.out.println("Tabuleiro inválido, navio não está na vertical ou horizontal");
        System.exit(0);
    }

    //Procura um caractere válido de navio no tabuleiro
    static void buscaNaviosTabuleiro (String[][] tabuleiro){
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                int tamanho_navio = tamanhoNavio(tabuleiro[i][j]);
                if(tamanho_navio != 0){
                    navioVerticalHorizontal(tabuleiro, i, j, tamanho_navio, tabuleiro[i][j]);
                }
            }
        }
    }

    //Verifica se todos os caracteres de navio apareceram ao menos uma vez
    static void haAoMenosUmNavidoCada (boolean[] cada_navio){
        for (int i = 0; i < cada_navio.length; i++) {
            if(!cada_navio[i]){
                System.out.println("Tabuleior inválido, não inclui um navio de cada tipo");
                System.exit(0);
            }
        }
    }

    //Verifica se há navios multiplos, desconhecidos ou se há realmente um de cada tipo
    static void desconhecidosMultiplos(boolean[] cada_navio, int pos, int[] comprimento_aparecidos){ //Navio existe porém não possui tamanho previsto
        String[] navios = {"N", "S", "C", "E", "P"};
        for (int i = 0; i < navios.length; i++) {
            if(cada_navio[pos] && comprimento_aparecidos[i] != tamanhoNavio(navios[i])){
                //Se o navio for multiplo do tamanho mínimo, retornamos que há navios múltiplos
                if(comprimento_aparecidos[i] % tamanhoNavio(navios[i]) == 0){
                    System.out.println("Tabuleiro inválido, inclui múltiplos navios do mesmo tipo");
                    System.exit(0);
                    //Se o comprimento mínimo não for atingido, tratamos como não inclui um navio de cada tipo
                } else if (comprimento_aparecidos[i] < tamanhoNavio(navios[i])){
                    System.out.println("Tabuleiro inválido, não inclui um navio de cada tipo");
                    System.exit(0);
                    //Agora caso contrário, tratamos que existe um navio desconhecido
                } else {
                    System.out.println("Tabuleiro inválido, inclui navios desconhecidos");
                    System.exit(0);
                }
            }
        }
    }

    //Coleta aparições dos navios validos e atualiza cada_navio com true
    static void registraUmNavidoDeCada (String[] linha, boolean[] cada_navio, int[] comprimento_aparecidos){
        for (int i = 0; i < linha.length; i++) {
            switch (linha[i]){
                case "N":
                    comprimento_aparecidos[0]++;
                    cada_navio[0] = true;
                    break;
                case "S":
                    comprimento_aparecidos[1]++;
                    cada_navio[1] = true;
                    break;
                case "C":
                    comprimento_aparecidos[2]++;
                    cada_navio[2] = true;
                    break;
                case "E":
                    comprimento_aparecidos[3]++;
                    cada_navio[3] = true;
                    break;
                case "P":
                    comprimento_aparecidos[4]++;
                    cada_navio[4] = true;
                    break;
            }
        }
    }

    //Retorna o tamanho do navio
    static int tamanhoNavio (String linha) {
        return switch (linha) {
            case "N" -> 2;
            case "S" -> 3;
            case "C" -> 3;
            case "E" -> 4;
            case "P" -> 5;
            default -> 0;
        };
    }

    //Verifica se cada linha do tabuleiro possui caracteres válidos
    static boolean verificaSeHaElementosValidos (String linha){
        return switch (linha) { //Retorna falso se não for barco conhecido ou se possuir bloco de água
            case "N" -> true;
            case "S" -> true;
            case "C" -> true;
            case "E" -> true;
            case "P" -> true;
            case "." -> true;
            default -> false;
        };
    }

    /*Varre vetor buscando navio inválido, ignora elementos de água e de navios conhecidos,
    encerra programa se achar qualquer caracter que não se enquadrad nos discritos anteriormente*/
    static void temNavioDesconhecido (String[] linha){
        for (int i = 0; i < linha.length; i++) {
            if(!verificaSeHaElementosValidos(linha[i])){
                System.out.println("Tabuliero inválido, inclui navios desconhecidos");
                System.exit(0);
            }
        }
    }

    //Se linha do tabuleiro tiver uma quantidade diferente de 10 linhas, ou, se quatidade de linhas for maior que 10
    static void temTamanho10x10 (){
        System.out.println("Tabuliero inválido, não tem a dimensão correta de 10×10 casas ");
        System.exit(0);
    }

    static void leArquivo(Scanner arquivo, String[][] tabuleiro){
        int qtd_linhas = 0;
        String[] linha = null;
        boolean[] cada_navio = {false, false, false, false, false};
        int[] comprimento_aparecidos = {0, 0, 0, 0, 0};
        while(arquivo.hasNextLine()){ //Enquanto possui linhas a ler
            qtd_linhas++;
            linha = arquivo.nextLine().split(" ");
            if(qtd_linhas > 10 && !arquivo.hasNextLine() || linha.length < 10){ //Se linha possuir menos de 10 colunas, ou, se tiver mais de 10 e arquivo não possuir próxima linha
                temTamanho10x10();
            }
            temNavioDesconhecido(linha);
            registraUmNavidoDeCada(linha, cada_navio, comprimento_aparecidos);
            System.arraycopy(linha, 0, tabuleiro[qtd_linhas - 1], 0, linha.length); //Copia cada linha do tabuleiro pra a varivel tabuleiro (Obs: Intelij sugeriu esta forma)
        }
        haAoMenosUmNavidoCada(cada_navio);
        desconhecidosMultiplos(cada_navio, 3, comprimento_aparecidos);
    }

    public static void main(String[] args) {
        Scanner arquivo = new Scanner(System.in);
        String[][] tabuleiro = new String[10][10];
        leArquivo(arquivo, tabuleiro);
        buscaNaviosTabuleiro(tabuleiro);
        System.out.println("Tabuleiro válido");
    }
}
